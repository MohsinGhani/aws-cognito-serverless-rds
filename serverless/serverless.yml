# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: productmania # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  
  getCategory:
    handler: handler.getCategory
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: getCategory
         method: GET
         cors: true
  
  createCategory:
    handler: handler.createCategory
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: add-category
         method: POST
         cors: true
  
  updateCategory:
    handler: handler.updateCategory
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: update-category/{category_id}
         method: PUT
         cors: true
  
  deleteCategory:
    handler: handler.deleteCategory
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: delete-category/{category_id}
         method: DELETE
         cors: true
  
  ################ USER SECTION START ###################
  postSignUp:
    handler: handler.postSignUp
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: post-signup
         method: POST
         cors: true
  
  postConfirmation:
    handler: handler.postConfirmation
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: post-confirmation/{user_id}
         method: PUT
         cors: true
  
  updateUser:
    handler: handler.updateUser
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: update-user/{user_id}
         method: PUT
         cors: true
  
  getUsers:
    handler: handler.getUsers
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: get-users
         method: GET
         cors: true
  
  getUserById:
    handler: handler.getUserById
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: get-user/{user_id}
         method: GET
         cors: true

  ################ PRODUCT SECTION START ###################
  addProduct:
    handler: handler.addProduct
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: add-product
         method: POST
         cors: true
  
  updateProduct:
    handler: handler.updateProduct
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: update-product/{product_id}/{creator_id}
         method: PUT
         cors: true
  
  getProducts:
    handler: handler.getProducts
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: get-products
         method: GET
         cors: true
  
  getProductById:
    handler: handler.getProductById
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: get-product/{product_id}
         method: GET
         cors: true

  ################ LIKE SECTION START ###################
  likeProduct:
    handler: handler.likeProduct
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: like
         method: POST
         cors: true

  ################ COMMENT SECTION START ###################
  doComment:
    handler: handler.doComment
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: comment
         method: POST
         cors: true

  updateComment:
    handler: handler.updateComment
    memorySize: 512 # optional, in MB, default is 1024
    events:
     - http:
         path: comment/{comment_id}
         method: PUT
         cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
